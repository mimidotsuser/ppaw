import { ProductModel } from './product.model';export interface ProductBalanceModel {  id: string;  product_id: string;  product: ProductModel;  stock_in: number; // Number of items in the warehouse  stock_out: number; // Number of items out of the warehouse  physical_balance: number; // in warehouse-out of warehouse  issue_requests_created: number // total of items in a single issue requests  issue_requests_rejected: number //total of rejected in a single checking/approval requests  virtual_balance: number // physical_balance - (total_requests-rejected)  transaction_type: string;  transaction_id: string;}/*IN | OUT|Bal| Req| Rej|VB10 | 0 | 10 | 0  | 0  | 100  | 0 | 10 | 10 | 0  | 00  | 0 | 10 | 0  | 1  | 10  | 0 | 10 | 1  | 0  | 00  | 9 | 1  | 0  | 0  | 050 | 0 | 51 |//balance affected by In and Out columns only    - Increment on stock in i.e. previous bal + current checked in    - Decrement on stock out i.e. previous bal - current checked out// Virtual balance:      - Increment on stock in      - Decrement on stock request      - Increment on stock request reject [when verified/approved is less]       * Do nothing when on stock checkout as this is already done by stock reques// stock in count  -> total of items that were checked-in on a single request// stock out    -> total of items that were checked out on a single request/////soupdateBalance(in,out,requested,rejected){if(in>0){//set the value on stock_in column while incrementing actual balance **and** virtual balance}if(out>0){//set the value on stock out while decrementing actual balance}if(requested>0){// set the value on requested column while decrementing the virtual balance}if(requested>0){// set the value on rejected column while incrementing the virtual balance}} */